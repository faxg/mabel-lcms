name: deploy

on:
  workflow_call:
    inputs:
        environmentType:
            required: true
            type: string
        resourceGroupName:
            required: true
            type: string


    secrets:
        AZURE_CLIENT_ID:
            required: true
        AZURE_TENANT_ID:
            required: true
        AZURE_SUBSCRIPTION_ID:
            required: true
        # POSTGRES_ADMIN_PASSWORD:
        #     required: true


        # externalApiKey:
        #    required: true


jobs:
  ###
  ### Validate job
  ###
  # validate:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: azure/login@v2
  #     name: Sign in to Azure
  #     with:
  #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}    

  #   - if: inputs.environmentType != 'production'
  #     uses: azure/arm-deploy/@v2
  #     name: Run preflight validation (non-production)
  #     with:
  #       scope: resourcegroup
  #       deploymentName: ${{ github.run_number }}
  #       resourceGroupName: ${{ inputs.resourceGroupName }}
  #       template: ./infrastructure/main.bicep
  #       deploymentMode: Validate
  #       parameters: >
  #         @./infrastructure/parameters.${{ inputs.environmentType }}.json
  #         databaseAdminPassword=${{ secrets.POSTGRES_ADMIN_PASSWORD }}


  #   - if: inputs.environmentType == 'production'
  #     uses: azure/arm-deploy@v2
  #     name: Run what-if (production)
  #     with:
  #       scope: resourcegroup
  #       failOnStdErr: false
  #       resourceGroupName: ${{ inputs.resourceGroupName }}
  #       template: ./infrastructure/main.bicep
  #       additionalArguments: --what-if
  #       parameters: >
  #         @./infrastructure/parameters.${{ inputs.environmentType }}.json
  #         databaseAdminPassword=${{ secrets.POSTGRES_ADMIN_PASSWORD }}


  ##
  ## Deploy into rg usign Bicep Templates
  ##
  deploy:
    #needs: validate
    environment: ${{ inputs.environmentType }}
    
    runs-on: ubuntu-latest

    # outputs:
    #   appServiceAppHostName: ${{ steps.deploy.outputs.appServiceAppHostName }}

    steps:
    - uses: actions/checkout@v4
    - uses: azure/login@v2
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - uses: azure/arm-deploy@v2
      id: deploy
      name: Deploy Bicep template to ${{ inputs.environmentType }}
      with:
        scope: resourcegroup
        failOnStdErr: false
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ inputs.resourceGroupName }}
        template: ./infrastructure/main.bicep
        parameters: >
          @./infrastructure/parameters.${{ inputs.environmentType }}.json
          databaseAdminPassword=234${{ secrets.POSTGRES_ADMIN_PASSWORD }}




  #   #
  #   # Run basic smoke tests on fresh deployments
  #   #
  # smoketest:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   environment: Development  #TODO FIXME Federated Credential for environments instead of branch?
  #   steps:
  #   - uses: actions/checkout@v3
  #       name: Run smoke tests
  #       TODO: Add Playwright UI Smoke tests
  #       - run: |
  #           $container = New-PesterContainer `
  #             -Path 'infrastructure/Mabel.Tests.ps1' `
  #             -Data @{ HostName = '${{needs.deploy.outputs.appServiceAppHostName}}' }
  #           Invoke-Pester `
  #             -Container $container `
  #             -CI
  #         shell: pwsh
        
  #   rollback: 
  #     runs-on: ubuntu-latest
  #     needs: smoke-test
  #     if: ${{ always() && needs.smoke-test.result == 'failure' }}
  #     steps:
  #     - run: |
  #         echo "Performing rollback steps..."